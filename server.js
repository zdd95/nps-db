const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    database: process.env.DB_NAME,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 20
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
pool.on('connect', () => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ feedback (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º)
function parseFeedback(feedback) {
    if (!feedback) return '';
    
    // –ï—Å–ª–∏ feedback —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
    if (typeof feedback === 'string') {
        try {
            const parsed = JSON.parse(feedback);
            return JSON.stringify(parsed, null, 2); // –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return feedback;
        }
    }
    
    // –ï—Å–ª–∏ feedback —É–∂–µ –æ–±—ä–µ–∫—Ç
    if (typeof feedback === 'object') {
        return JSON.stringify(feedback, null, 2);
    }
    
    return String(feedback);
}

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.post('/api/nps-data', async (req, res) => {
    const { campaignIds, date } = req.body;

    try {
        if (!campaignIds || !Array.isArray(campaignIds) || campaignIds.length === 0) {
            return res.status(400).json({ error: 'campaignIds –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º' });
        }

        // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è WHERE
        const campaignConditions = campaignIds.map((_, index) => `campaign_id = $${index + 1}`).join(' OR ');
        
        let query = `
            SELECT client_user_id, campaign_id, score, feedback, created_at
            FROM nps.survey
            WHERE (${campaignConditions})
        `;
        
        const params = [...campaignIds];
        let paramIndex = campaignIds.length + 1;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if (date) {
            query += ` AND created_at >= $${paramIndex}`;
            params.push(date + ' 00:00:00+07');
            paramIndex++;
        }

        query += ' ORDER BY created_at DESC';

        console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å:', query);
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', params);

        const result = await pool.query(query, params);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        const processedData = result.rows.map(row => ({
            ...row,
            feedback: parseFeedback(row.feedback),
            score: row.score !== null ? row.score : ''
        }));

        console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${processedData.length}`);
        res.json(processedData);

    } catch (error) {
        console.error('Database error:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + error.message });
    }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ë–î
app.get('/api/dynamic-projects', async (req, res) => {
    try {
        const query = `
            SELECT
                LOWER(c.client_id) as project_name,
                ARRAY_AGG(DISTINCT c.id) as campaign_ids
            FROM nps.campaign c
            WHERE c.survey_type = 'NPS'
            GROUP BY LOWER(c.client_id)
            ORDER BY project_name
        `;
        
        const result = await pool.query(query);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const projectsMapping = {};
        result.rows.forEach(row => {
            const projectName = row.project_name.toUpperCase();
            projectsMapping[projectName] = row.campaign_ids;
        });
        
        res.json(projectsMapping);
    } catch (error) {
        console.error('Error fetching projects:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤' });
    }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö –ø—Ä–æ–µ–∫—Ç–∞
app.get('/api/campaign-info', async (req, res) => {
    const { projectName } = req.query;

    try {
        if (!projectName) {
            return res.status(400).json({ error: 'projectName –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        const query = `
            SELECT
                c.id as campaign_id,
                c.domain,
                c.client_id,
                c.start_at,
                c.end_at
            FROM nps.campaign c
            WHERE LOWER(c.client_id) = LOWER($1)
            AND c.survey_type = 'NPS'
            ORDER BY c.domain, c.start_at DESC
        `;
        
        const result = await pool.query(query, [projectName]);
        
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching campaign info:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö' });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
app.get('/api/test-db', async (req, res) => {
    try {
        const result = await pool.query('SELECT NOW() as current_time');
        res.json({ 
            success: true, 
            message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ',
            time: result.rows[0].current_time
        });
    } catch (error) {
        console.error('Test DB error:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ' + error.message 
        });
    }
});

// Health check
app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    
    try {
        await pool.end();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
        process.exit(1);
    }
});

app.listen(port, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`);

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    try {
        const result = await pool.query(`
            SELECT COUNT(DISTINCT LOWER(client_id)) as project_count
            FROM nps.campaign
            WHERE survey_type = 'NPS'
        `);
        console.log(`üìã –ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ë–î: ${result.rows[0].project_count}`);
    } catch (error) {
        console.log('üìã –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    }
});